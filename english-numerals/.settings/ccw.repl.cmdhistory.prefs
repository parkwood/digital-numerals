#Tue Nov 08 07:42:38 GMT 2011
cmdhistory=["(require 'english-numerals.test.core)" "(require 'english_numerals.test.core)" "(run-tests)" "(in-ns 'english_numerals.test.core)" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(run-tests)" ";; Loading file test\\\\english_numerals\\\\test\\\\core.clj" "(run-tests)" "(use 'clojure.test)" "(require 'english-numerals.test.core)" ";; Loading file test\\\\english_numerals\\\\test\\\\core.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(english-numeral)" "(in-ns 'english-numerals.test.core)" "(english-numeral)" "(english-numeral 123)" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(run-tests)" "(doc vec)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(run-tests)" "(doc right)" "(concat \\"sdf\\" \\"sdfsdf\\")" "(str (concat \\"sdf\\" \\"sdfsdf\\"))" "(doc repeatedly)" "(doc append)" "(str \\"qwe\\" \\"qwe\\")" "(defn blank [size]\\r\\n  (map (fn [a] \\"*\\") (range size)))" "(blank 3)" "(. Integer valueOf \\"3\\")" "(defn blank [size]\\r\\n  (apply str (map (fn [a] \\"*\\") (range size))))" "(blank 3)" "(.replace \\"abc\\")" "(conj \\"x\\" \\"sdfsd\\")" "(defn left [size]\\r\\n  (let [[_ & remainder] (blank size)\\r\\n        one-line (str \\"|\\" remainder)]\\r\\n    (map \#(one-line) (range size)))\\r\\n  )" "(left 2)" "(defn blank [size]\\r\\n  (apply str (map (fn [a] \\"*\\") (range size))))" "(blank 3)" "(doc left)" "(defn left [size]\\r\\n  (let [[_ & remainder] (blank size)\\r\\n        one-line (str \\"|\\" remainder)]\\r\\n    (map \#(one-line) (range size)))\\r\\n  )" "(left 2)" "(defn left [size]\\r\\n  (let [[_ & remainder] (blank size)\\r\\n        one-line (str \\"|\\" remainder)]\\r\\n    (map (fn [_]one-line) (range size)))\\r\\n  )" "(left 2)" "(blank 3)" "(defn left [size]\\r\\n  (let [[_ & remainder] (blank size)\\r\\n        one-line (apply str \\"|\\" remainder)]\\r\\n    (map (fn [_]one-line) (range size)))\\r\\n  )" "(left 2)" "(defn right [size]\\r\\n  (map reverse (left size)))" "(right 2)" "(apply reverse [\\"asd\\"])" "(reverse \\"asdf\\")" "(apply str (reverse \\"asdf\\"))" "(apply (fn [a] (apply str (reverse))) [\\"asd\\"])" "(apply (fn [a] (apply str (reverse a))) [\\"asd\\"])" "(apply (fn [a] (apply str (reverse a))) [\\"asd\\" \\"asdasdasd\\"])" "(map (fn [a] (apply str (reverse a))) [\\"asd\\" \\"asdasdasd\\"])" "(defn right [size]\\r\\n  (map (fn [a] (apply str (reverse a))) [\\"asd\\" \\"asdasdasd\\"]))" "(right 2)" "\\r\\n(defn right [size]\\r\\n  (map (fn [a] (apply str (reverse a))) (left size)))" "(right 2)" "(right 3)" "(def display {\\r\\n              \\"1\\" [blank right blank right blank]\\r\\n              \\"2\\" [full right full left full]\\r\\n              })" "(defn blank [size]\\r\\n  (apply str (map (fn [a] \\"*\\") (range size))))\\r\\n\\r\\n(defn full [size]\\r\\n  (apply str (map (fn [a] \\"-\\") (range size))))\\r\\n\\r\\n(defn left [size]\\r\\n  (let [[_ & remainder] (blank size)\\r\\n        one-line (apply str \\"|\\" remainder)]\\r\\n    (map (fn [_]one-line) (range size)))\\r\\n  )\\r\\n\\r\\n(defn right [size]\\r\\n  (map (fn [a] (apply str (reverse a))) (left size)))\\r\\n\\r\\n(def display {\\r\\n              \\"1\\" [blank right blank right blank]\\r\\n              \\"2\\" [full right full left full]\\r\\n              })" "(display \\"2\\")" "(apply inc 1)" "(doc call)" "(apropos apply)" "(apropos \\"call\\")" "(defn caller [a] (a 1))" "(caller inc)" "(defn translate-number [digit]\\r\\n  (let [translation (display digit)\\r\\n        as-numeric (. Integer valueOf digit)]\\r\\n    (concat (map (fn [translator] (translator as-numeric) ) translation))\\r\\n    )" "\\r\\n(defn translate-number [digit]\\r\\n  (let [translation (display digit)\\r\\n        as-numeric (. Integer valueOf digit)]\\r\\n    (concat (map (fn [translator] (translator as-numeric) ) translation))\\r\\n    )\\r\\n  )" "(translate-number \\"3\\")" "(translate-number \\"2\\")" "(translate-number \\"1\\")" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(translate-number \\"1\\")" "(translate-number 1 \\"1\\")" "(translate-number 2 \\"1\\")" "(english-numeral 1 1)" "(defn english-numeral [size number]\\r\\n  (vec(map (partial translate-number size) (str number) )))\\r\\n\\r\\n" "(english-numeral 1 1)" "(translate-number 2 \\"1\\")" "(str 1)" "(defn translate-number [size digit]\\r\\n  (prn size digit)\\r\\n  (let [translation (display digit)\\r\\n        as-numeric (. Integer valueOf digit)]\\r\\n    (concat (map (fn [translator] (translator size) ) translation))\\r\\n    )\\r\\n  )\\r\\n\\r\\n(defn english-numeral [size number]\\r\\n  (vec(map (partial translate-number size) (str number) )))\\r\\n" "(english-numeral 1 1)" "(prn 3)" "(defn translate-number [size digit]\\r\\n  (prn size digit)\\r\\n  (let [translation (display digit)\\r\\n        as-numeric (. Integer valueOf (str digit))]\\r\\n    (concat (map (fn [translator] (translator size) ) translation))\\r\\n    )\\r\\n  )" "(english-numeral 1 1)" "(defn translate-number [size digit-char]\\r\\n  (prn size digit)\\r\\n  (let [digit (str digit-char)\\r\\n        translation (display digit)\\r\\n        as-numeric (. Integer valueOf digit)]\\r\\n    (concat (map (fn [translator] (translator size) ) translation))\\r\\n    )\\r\\n  )" "(defn translate-number [size digit-char]\\r\\n  (let [digit (str digit-char)\\r\\n        translation (display digit)\\r\\n        as-numeric (. Integer valueOf digit)]\\r\\n    (concat (map (fn [translator] (translator size) ) translation))\\r\\n    )\\r\\n  )" "(english-numeral 1 1)" "(english-numeral 1 11)" "(defn translate-number [size digit-char]\\r\\n  (let [digit (str digit-char)\\r\\n        translation (display digit)\\r\\n        as-numeric (. Integer valueOf digit)]\\r\\n    (flatten(concat (map (fn [translator] (translator size) ) translation)))\\r\\n    )\\r\\n  )" "(english-numeral 1 1)" "(english-numeral 2 1)" "(doc prn)" "(defn print-numbers [numbers]\\r\\n  (apply map prn numbers)\\r\\n  )" "(left 3)" "(right 3)" "(defn right [size]\\r\\n  (map (fn [a] (prn a) (apply str (reverse a))) (left size)))\\r\\n" "(right 3)" "(.replaceCharAt \\"asd\\" 0 /z)" "(.replaceCharAt \\"asd\\" 0 \\\\z)" "(.replace \\"asd\\" 0 \\\\z)" "(doc rest)" "(defn both [size]\\r\\n  (map (fn [a & as] (str \\"-\\" (apply str as ))) (right size)))" "(both 3)" "(defn right [size]\\r\\n  (map (fn [a] (apply str (reverse a))) (left size)))\\r\\n" "(both 3)" "(seq \\"asd\\")" "(apply str (seq \\"asd\\"))" "(str \\"ddddddddddd\\"(apply str (seq \\"asd\\")))" "\\r\\n(defn both [size]\\r\\n  (map (fn [a & as] (prn as)(str \\"-\\" (apply str as ))) (right size)))\\r\\n" "(both 3)" "(defn both [size]\\r\\n  (map (fn [a & as] (prn a as)(str \\"-\\" (apply str as ))) (right size)))\\r\\n" "(both 3)" "(rest \\"sdsf\\")" "(defn both [size]\\r\\n  (map (fn [a] (prn a as)(str \\"-\\" (apply str (rest a) ))) (right size)))\\r\\n" "(defn both [size]\\r\\n  (map (fn [a](str \\"-\\" (apply str (rest a) ))) (right size)))\\r\\n" "(both 3)" "(defn both [size]\\r\\n  (map (fn [a](str \\"|\\" (apply str (rest a) ))) (right size)))\\r\\n" "(both 3)" "(both 2)" "(english-numeral 2 33)" "(defn english-numeral [size number]\\r\\n  (vec(map (partial translate-number size) (seq(str number)) )))\\r\\n" "(english-numeral 2 33)" "(english-numeral 2 22)" "(print-numbers(english-numeral 2 22))" "(print-numbers(english-numeral 2 222))" "(print-numbers(english-numeral 2 ))" "(print-numbers(english-numeral 2 111))" "(english-numeral 2 111)" "(doc doto)" "(doc pprint)" "(defn print-numbers [numbers]\\r\\n  (pprint(apply map str numbers))\\r\\n  )" "(print-numbers(english-numeral 2 111))" "(defn print-numbers [numbers]\\r\\n  (doseq (apply map str numbers) prn)\\r\\n  )" "(defn print-numbers [numbers]\\r\\n  (doseq [x (apply map str numbers)] prn x)\\r\\n  )" "(print-numbers(english-numeral 2 111))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(print-numbers(english-numeral 2 111))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" ";; Loading file test\\\\english_numerals\\\\test\\\\core.clj" "(doc do)" "(pprint [1 2 3])" "(pprint [[1 2 3][1 2 3]])" "(do prn [[1 2 3][1 2 3]])" "(for [line [1 2 3 4]] (prn line))" "(doseq [line [1 2 3 4]] (prn line))" "(defn print-numbers [numbers]\\r\\n  (let [lines (apply map str numbers)]\\r\\n    (doseq [line lines] (prn line)))\\r\\n  )" "(print-numbers(english-numeral 2 111))" "(print-numbers(english-numeral 2 121))" "(print-numbers(english-numeral 2 221))" "(print-numbers(english-numeral 3 221))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(print-numbers(english-numeral 3 0))" "(print-numbers(english-numeral 3 100))" "(print-numbers(english-numeral 2 100))" "(print-numbers(english-numeral 2 00))" "(print-numbers(english-numeral 2 0))" "(print-numbers(english-numeral 2 00))" "(print-numbers(english-numeral 2 000))" "(print-numbers(english-numeral 2 100))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(print-numbers(english-numeral 2 100))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(print-numbers(english-numeral 2 100))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(print-numbers(english-numeral 2 100))" "(print-numbers(english-numeral 2 120))" "(doc reduce)" "(defn blank [size] (reduce (fn [result _] (str result \\"*\\")  )  \\"\\" (range size))" "(defn blank [size] (reduce (fn [result _] (str result \\"*\\")  )  \\"\\" (range size)))" "(blank 3)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(print-numbers(english-numeral 2 123))" "(doc zip\\n     )" "(defn spaced-str [& args]\\n  (map (fn [x] (str x \\" \\")) args))" "(spaced-str 1 2 3)" "(defn spaced-str [& args]\\r\\n  (apply str (map (fn [x] (str x \\" \\")) args)))" "(spaced-str 1 2 3)" "(defn print-numbers [numbers]\\r\\n  (let [lines (apply map spaced-str numbers)]\\r\\n    (doseq [line lines] (prn line)))\\r\\n  )" "(print-numbers(english-numeral 2 123))" "(print-numbers(english-numeral 2 1230))" "(print-numbers(english-numeral 3 1230))" "(print-numbers(english-numeral 5 1230))" "(print-numbers(english-numeral 10 1230))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(run-tests)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'english-numerals.test.core)))" "(run-tests)"]
eclipse.preferences.version=1
